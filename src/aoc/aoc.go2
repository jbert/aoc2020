package aoc	// import "github.com/jbert/aoc2020"

import (
	"fmt"
	"strconv"
	"log"
)

type AOC struct {
	day int
	exampleData []byte
	useExampleData bool
}

func New(day int) *AOC {
	return &AOC{day: day}
}

func (aoc *AOC) Name() string {
	return fmt.Sprintf("day%d", aoc.day)
}


func MustAtoi(s string) int {
	n, err := strconv.Atoi(s)
	if err != nil {
		log.Fatalf("Can't parse [%s] as num: %s", s, err)
	}
	return n
}

// ----
// Copied from : go/src/cmd/go2go/testdata/go2path/src/constraints/constraints.go2


// Ordered permits any ordered type: any type that supports
// the operations <, <=, >=, >, as well as == and !=.
type Ordered interface {
	type int, int8, int16, int32, int64,
	uint, uint8, uint16, uint32, uint64, uintptr,
	float32, float64,
	string
}

// Integer permits any integer type.
type Integer interface {
	type int, int8, int16, int32, int64,
	uint, uint8, uint16, uint32, uint64, uintptr
}

// Signed permits any signed integer type.
type Signed interface {
	type int, int8, int16, int32, int64
}

// Unsigned permits any unsigned integer type.
type Unsigned interface {
	type uint, uint8, uint16, uint32, uint64, uintptr
}

type Numeric interface {
	type int, int8, int16, int32, int64,
		uint, uint8, uint16, uint32, uint64, uintptr,
		float32, float64,
		complex64, complex128
}
