package aoc

import (
	"fmt"
)

type VVec[T fmt.Stringer] struct {
	offset int		// [0] is at [offset]
	values []T 
	ctor func()T
	copyCtor func(T)T
}

func NewVVec[T fmt.Stringer](ctor func() T, copyCtor func(T) T) *VVec[T] {
	return &VVec[T]{
		ctor: ctor,
		copyCtor: copyCtor,
		values: make([]T, 0),
	}
}

func (vv *VVec[T]) Copy() *VVec[T] {
	newT := VVec[T]{
		offset: vv.offset,
		values: make([]T, len(vv.values)),
		ctor: vv.ctor,
		copyCtor: vv.copyCtor,
	}
	for i := range vv.values {
		newT.values[i] = vv.copyCtor(vv.values[i])
	}
	return vv
}

// VVec runs from (Lo,Hi)
func (vv *VVec[T]) Hi() int {
	return len(vv.values) - vv.offset
}

func (vv *VVec[T]) Lo() int {
	return -vv.offset
}

func (vv *VVec[T]) Spans(i int) bool {
	return vv.Lo() < i && i < vv.Hi()
}

func (vv *VVec[T]) extend(i int) {
	if vv.Spans(i) {
		return
	}
	for i >= vv.Hi() {
		vv.values = append(vv.values, vv.ctor())
	}
	for i < vv.Lo() {
		vv.values = append([]T{vv.ctor()}, vv.values...)
		vv.offset++
	}
}

func (vv *VVec[T]) pos(i int) int {
	return i + vv.offset
}

func (vv *VVec[T]) Set(i int, v T) {
	vv.extend(i)
	vv.values[vv.pos(i)] = v
}

func (vv VVec[T]) Get(i int) T {
	vv.extend(i)
	return vv.values[vv.pos(i)]
}

func (vv VVec[T]) String() string {
//	return fmt.Sprintf("%d (%d): %v", vv.offset, len(vv.values), vv.values)
	s := ""
	for i := range s {
		s += vv.values[i].String()
	}
	return s
}
