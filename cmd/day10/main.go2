package main

import (
	"aoc"
	"fmt"
	"sort"
)

func main() {
	a := aoc.New(10)
	a.SetExampleData(`
28
33
18
42
31
14
46
20
48
47
24
23
49
45
19
38
39
11
1
32
25
35
8
17
7
9
4
2
34
10
3
`)

	// a.UseExampleData(true)

	nums := a.ReadInts()

	as := NewAdapters(nums)

	fmt.Printf("device %d\n", as.DeviceJoltage())
	counts := as.Differences()
	fmt.Printf("1s %d * 3s %d == %d\n", counts[1], counts[3], counts[1]*counts[3])
}

type Adapters struct {
	joltages []int
}

func NewAdapters(joltages []int) *Adapters {
	as := Adapters{joltages: joltages}
	sort.Ints(as.joltages)
	return &as
}

func (as *Adapters) DeviceJoltage() int {
	return as.joltages[len(as.joltages)-1] + 3
}

func (as *Adapters) Differences() []int {
	current := 0             // Hah :-)
	counts := make([]int, 4) // we use 1,2,3
	js := as.joltages
	js = append(js, as.DeviceJoltage())
	for _, j := range js {
		d := j - current
		if d <= 0 || d > 3 {
			panic(fmt.Sprintf("Difference of %d between %d and %d", d, j, current))
		}
		counts[d]++
		current = j
	}
	return counts
}
