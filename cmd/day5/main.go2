package main

import (
	"fmt"
	"sort"
	"strconv"
	"strings"

	"aoc"
)

func main() {
	a := aoc.New(5)
	lines := a.ReadLines()

	maxSeatID := aoc.MaxSlice(aoc.Map(findSeat, lines))

	fmt.Printf("max seatID: %d", maxSeatID)
}

func findSeat(s string) int {
	// binary encoding:
	// F is 0, B is 1
	// L is 0, R is 1
	s = strings.ReplaceAll(s, "F", "0")
	s = strings.ReplaceAll(s, "B", "1")
	s = strings.ReplaceAll(s, "L", "0")
	s = strings.ReplaceAll(s, "R", "1")
	seatID, err := strconv.ParseInt(s, 2, 32)
	if err != nil {
		panic(fmt.Sprintf("Can't parse [%s] as binary: %s", s, err))
	}
	return int(seatID)
}

type Record map[string]string

func NewRecord(group []string) Record {
	record := make(map[string]string)
	for _, l := range group {
		bits := strings.Split(l, " ")
		for _, bit := range bits {
			fieldBits := strings.SplitN(bit, ":", 2)
			record[fieldBits[0]] = fieldBits[1]
		}
	}
	return record
}

func (r Record) String() string {
	var sortedKeys []string
	for k, _ := range r {
		sortedKeys = append(sortedKeys, k)
	}
	sort.Strings(sortedKeys)

	s := ""
	first := true
	for _, k := range sortedKeys {
		v := r[k]
		if !first {
			s += " "
		}
		s += fmt.Sprintf("%s=%s", k, v)
		first = false
	}
	return s
}

func (r Record) IsStrictlyValid() bool {
	if !r.HasNeededFields() {
		return false
	}
	err := r.ValidationError()
	if err != nil {
		fmt.Printf("r [%s]: %s\n", r, err)
	}
	return err == nil
}

type Validator func(string) error

func validHasDigits(n int) Validator {
	return func(s string) error {
		if len(s) != n {
			return fmt.Errorf("Must have %d digits, has %d", n, len(s))
		}
		for i := range s {
			if s[i] < '0' || s[i] > '9' {
				return fmt.Errorf("Contains non-digit '%c'", s[i])
			}
		}
		return nil
	}
}

func validNumIn(lo, hi int) Validator {
	return func(s string) error {
		n, err := strconv.Atoi(s)
		if err != nil {
			return fmt.Errorf("Can't parse year [%s] as numeric: %s", s, err)
		}
		if n < lo || n > hi {
			return fmt.Errorf("Num %d out of range [%d,%d]", n, lo, hi)
		}
		return nil
	}
}

func validHeight(s string) error {
	if len(s) < 3 {
		return fmt.Errorf("String too short for height [%s]", s)
	}
	sNum := s[:len(s)-2]
	sUnits := s[len(s)-2:]
	switch sUnits {
	case "cm":
		return validNumIn(150, 193)(sNum)
	case "in":
		return validNumIn(59, 76)(sNum)
	default:
		return fmt.Errorf("Unknown units [%s]", sUnits)
	}
}

func validEyeColour(s string) error {
	allowedColours := "amb blu brn gry grn hzl oth"
	if strings.Index(s, " ") >= 0 {
		return fmt.Errorf("eye colour [%s] contains space", s)
	}
	if len(s) != 3 {
		return fmt.Errorf("eye colour [%s] not 3 chars", s)
	}
	if strings.Index(allowedColours, s) < 0 {
		return fmt.Errorf("eye colour [%s] not in list", s)
	}
	return nil
}

func validColour(s string) error {
	if len(s) != 7 {
		return fmt.Errorf("colour not 7 chars: [%s]", s)
	}
	if s[0] != '#' {
		return fmt.Errorf("colour not start with # : [%s]", s)
	}
	for i := range s[1:] {
		c := s[i+1]
		if !((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {
			return fmt.Errorf("colour contains invalid hex [%c] at pos %d [%s]", c, i, s)
		}
	}
	return nil
}

func (r Record) ValidationError() error {
	fieldValidator := map[string]Validator{
		"byr": validNumIn(1920, 2002),
		"iyr": validNumIn(2010, 2020),
		"eyr": validNumIn(2020, 2030),
		"hgt": validHeight,
		"hcl": validColour,
		"ecl": validEyeColour,
		"pid": validHasDigits(9),
		"cid": func(s string) error { return nil },
	}

	for k, v := range r {
		validator, ok := fieldValidator[k]
		if !ok {
			return fmt.Errorf("Unknown field: %s", k)
		}
		if err := validator(v); err != nil {
			return err
		}
	}
	return nil
}

func (r Record) HasNeededFields() bool {
	neededFields := []string{
		"byr",
		"iyr",
		"eyr",
		"hgt",
		"hcl",
		"ecl",
		"pid",
		// optional
		//		"cid",
	}
	for _, needed := range neededFields {
		_, ok := r[needed]
		if !ok {
			return false
		}
	}
	return true
}

func linesToGroups(lines []string) [][]string {
	var groups [][]string
	var group []string
	for _, l := range lines {
		if l == "" {
			groups = append(groups, group)
			group = []string{}
		} else {
			group = append(group, l)
		}
	}
	if len(group) > 0 {
		groups = append(groups, group)
	}
	return groups
}
