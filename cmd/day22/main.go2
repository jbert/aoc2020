package main

import (
	"aoc"
	"aoc/set"
	"fmt"
)

func main() {
	a := aoc.New(22)
	a.SetExampleData(`
Player 1:
9
2
6
3
1

Player 2:
5
8
4
7
10
`)
	//a.UseExampleData(true)
	groups := a.ReadLineGroups()
	decks := aoc.Map(parseDeck, groups)
	if len(decks) != 2 {
		panic("on the streets of birmingham")
	}
	game := NewGame(decks[0], decks[1])

	for !game.Over() {
		game.Round()
	}
	fmt.Printf("scores: %d\n", game.Winner().Score())
}

type Deck struct {
	name  string
	cards []int
}

func parseDeck(lines []string) *Deck {
	var deck Deck
	deck.name = lines[0]
	deck.cards = aoc.Map(aoc.MustAtoi, lines[1:])
	return &deck
}

func (d Deck) NumCards() int {
	return len(d.cards)
}

func (d *Deck) Pop() int {
	card := d.cards[0]
	d.cards = d.cards[1:]
	return card
}

func (d *Deck) Shift(card int) {
	d.cards = append(d.cards, card)
}

func (d *Deck) Score() int {
	score := 0
	for i := range d.cards {
		j := len(d.cards) - i - 1
		score += d.cards[j] * (i + 1)
	}
	return score
}

type Game struct {
	A, B *Deck
	seen *set.Set[string]
}

func NewGame(a, b *Deck) *Game {
	seen := set.New[string]()
	return &Game{
		A:    a,
		B:    b,
		seen: &seen,
	}
}

func (g *Game) Over() bool {
	return g.A.NumCards() == 0 || g.B.NumCards() == 0
}

func (g *Game) Round() {
	if g.Over() {
		panic("logic error")
	}

	//fmt.Printf("A deck - %v\n", g.A.cards)
	//fmt.Printf("B deck - %v\n", g.B.cards)

	gameState := g.State()
	if g.seen.Contains(gameState) {
		// the game instantly ends in a win for player 1.
		//fmt.Printf("Seen before - A wins\n")
		g.B.cards = []int{}
		if !g.Over() {
			panic("can't force a win?")
		}
		return
	}
	g.seen.Insert(gameState)

	// Look at your cards
	a, b := g.A.Pop(), g.B.Pop()

	//fmt.Printf("A plays %d\n", a)
	//fmt.Printf("B plays %d\n", b)
	var aWins bool
	if a <= g.A.NumCards() && b <= g.B.NumCards() {
		//fmt.Printf("Play Sub Game\n\n")
//		fmt.Printf("JB - a %d aNC %d b %d bNC %d %s\n", a, b, g.A.NumCards(), g.B.NumCards(), gameState)
		// Copied cards
		aNew := &Deck{cards: make([]int, a)}
		copy(aNew.cards, g.A.cards[:a])
		bNew := &Deck{cards: make([]int, b)}
		copy(bNew.cards, g.B.cards[:b])
		newG := NewGame(aNew, bNew)
		// Unshared memoisation
		newSeen := set.New[string]()
		newG.seen = &newSeen

		for !newG.Over() {
			newG.Round()
		}
		aWins = newG.Winner() == aNew
		//fmt.Printf("Leaving sub game: aWins %t\n", aWins)

	} else {
		aWins = a > b
	}

	if aWins {
		//fmt.Printf("A Wins\n")
		g.A.Shift(a)
		g.A.Shift(b)
	} else {
		//fmt.Printf("B Wins\n")
		g.B.Shift(b)
		g.B.Shift(a)
	}

	//fmt.Printf("\n")
}

func (g *Game) State() string {
	return fmt.Sprintf("A: %v B %v", g.A.cards, g.B.cards)
}

func (g *Game) Scores() []int {
	return []int{g.A.Score(), g.B.Score()}
}

func (g *Game) Winner() *Deck {
	if !g.Over() {
		panic("no winner yet")
	}
	switch {
	case g.A.NumCards() == 0:
		return g.B
	case g.B.NumCards() == 0:
		return g.A
	default:
		panic("wtf?")
	}
}
