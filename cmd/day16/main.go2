package main

import (
	"aoc"
	"fmt"
	"strings"

	"aoc/set"
)

func main() {
	a := aoc.New(16)
	a.SetExampleData(`
class: 0-1 or 4-19
row: 0-5 or 8-19
seat: 0-13 or 16-19

your ticket:
11,12,13

nearby tickets:
3,9,18
15,1,5
5,14,9
`)
	/*
	   	a.SetExampleData(`
	   class: 1-3 or 5-7
	   row: 6-11 or 33-44
	   seat: 13-40 or 45-50

	   your ticket:
	   7,1,14

	   nearby tickets:
	   7,3,47
	   40,4,50
	   55,2,20
	   38,6,12
	   `)
	*/
	//a.UseExampleData(true)

	groups := a.ReadLineGroups()
	fmt.Printf("Groups: %v\n", groups)
	classes := aoc.Map(NewClass, groups[0])
	fmt.Printf("Classes: %v\n", classes)

	nearbyTickets := aoc.Map(NewTicket, groups[2][1:])
	fmt.Printf("Nearby: %v\n", nearbyTickets)

	var allRules []Rule
	for _, c := range classes {
		allRules = append(allRules, c.rules...)
	}

	errorRate := 0
	for _, t := range nearbyTickets {
		invalid, v := t.InvalidValue(allRules)
		if invalid {
			errorRate += v
		}
	}
	fmt.Printf("Error rate: %d\n", errorRate)

	validTickets := aoc.Filter(
		func(t Ticket) bool { invalid, _ := t.InvalidValue(allRules); return !invalid },
		nearbyTickets)
	fmt.Printf("%d out of %d tickets valid\n", len(validTickets), len(nearbyTickets))

	remainingClasses := set.NewFromSlice(aoc.IntsTo(len(classes) - 1))

	classForPosition := make([]Class, len(classes))

	for remainingClasses.Size() > 0 {
	CLASS:
		for i := range classForPosition {
			if classForPosition[i].name != "" {
				continue CLASS
			}
			valuesForPosition := aoc.Map(func(t Ticket) int { return t.values[i] }, validTickets)
			fmt.Printf("%d: Vals For position: %v\n", i, valuesForPosition)
			fmt.Printf("%d: Considering classes : %v\n", i, remainingClasses)
			possibleClasses := aoc.Filter(
				func(i int) bool { return classes[i].Consistent(valuesForPosition) },
				remainingClasses.Slice())
			fmt.Printf("%d: possible classes : %v\n", i, possibleClasses)
			if len(possibleClasses) == 1 {
				classForPosition[i] = classes[possibleClasses[0]]
				remainingClasses.Delete(possibleClasses[0])
				fmt.Printf("%d: %s\n", i, classForPosition[i].name)
			}
		}
	}

	fmt.Printf("CFP: %v\n", classForPosition)
	prod := 1
	myTicket := NewTicket(groups[1][1])
	for i, c := range classForPosition {
		if strings.HasPrefix(c.name, "departure") {
			prod *= myTicket.values[i]
		}
	}
	fmt.Printf("prod: %d\n", prod)
}

type Ticket struct {
	values []int
}

func NewTicket(s string) Ticket {
	return Ticket{
		values: aoc.Map(aoc.MustAtoi, strings.Split(s, ",")),
	}
}

func (t Ticket) InvalidValue(rules []Rule) (bool, int) {
VALUE:
	for _, v := range t.values {
		for _, r := range rules {
			if r.IsValid(v) {
				continue VALUE
			}
		}
		// Not valid for any rule
		return true, v
	}
	return false, 0
}

type Rule struct {
	lo, hi int
}

func NewRule(s string) Rule {
	r := Rule{}
	bits := strings.Split(s, "-")
	r.lo = aoc.MustAtoi(bits[0])
	r.hi = aoc.MustAtoi(bits[1])
	return r
}

func (r Rule) IsValid(v int) bool {
	return r.lo <= v && v <= r.hi
}

type Class struct {
	name  string
	rules []Rule
}

func (c Class) String() string {
	return fmt.Sprintf("%s: %v", c.name, c.rules)
}

func NewClass(s string) Class {
	c := Class{}

	colonIndex := strings.Index(s, ": ")
	if colonIndex < 0 {
		panic(fmt.Sprintf("Can't find colon: %s", s))
	}
	c.name = s[:colonIndex]

	rules := s[colonIndex+2:]
	bits := strings.Split(rules, " or ")
	c.rules = []Rule{
		NewRule(bits[0]),
		NewRule(bits[1]),
	}
	return c
}

func (c Class) Consistent(values []int) bool {
VALUE:
	for _, v := range values {
		for _, r := range c.rules {
			if r.IsValid(v) {
				continue VALUE
			}
		}
		// No rule was valid for this value
		return false
	}
	return true
}
