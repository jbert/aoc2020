package main

import (
	"aoc"
	"fmt"
)

type Slope aoc.Pos[int]

type Trees struct {
	size aoc.Pos[int]
	lines  []string
}

func NewTrees(lines []string) Trees {
	t := Trees{lines: lines}
	t.size = aoc.Pos[int]{
		X: len(lines[0]),
		Y: len(t.lines),
	}
	return t
}

func (t Trees) TreesOnTraverse(slope aoc.Pos[int]) int {
	pos := aoc.Pos[int]{}

	numTrees := 0
	for pos.Y < t.size.Y {
		if t.IsTree(pos) {
			numTrees++
		}
		pos = pos.Add(slope)
	}
	return numTrees
}

func (t Trees) IsTree(p aoc.Pos[int]) bool {
	if p.Y > t.size.Y {
		panic(fmt.Sprintf("Y out of bounds: %d > %d", p.Y, t.size.Y))
	}
	p.X = p.X % t.size.X
	return t.lines[p.Y][p.X] == '#'
}

func main() {
	a := aoc.New(3)
	lines := a.ReadLines()

	slope := aoc.Pos[int]{X: 3, Y: 1}
	t := NewTrees(lines)

	fmt.Printf("Trees: %d\n", t.TreesOnTraverse(slope))

	slopes := []aoc.Pos[int]{
		{1, 1},
		{3, 1},
		{5, 1},
		{7, 1},
		{1, 2},
	}
	product := 1
	for _, slope := range slopes {
		numTrees := t.TreesOnTraverse(slope)
		product *= numTrees
	}
	fmt.Printf("product: %d\n", product)
}
