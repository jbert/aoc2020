package main

import (
	"aoc"
	"aoc/bitmap"
	"errors"
	"fmt"
	"strconv"
	"strings"
)

func main() {
	a := aoc.New(8)
	a.SetExampleData(`
nop +0
acc +1
jmp +4
acc +3
jmp -3
acc -99
acc +1
jmp -4
acc +6
`)
	//a.UseExampleData(true)

	lines := a.ReadLines()
	insts := aoc.Map(NewInstruction, lines)

	device := NewDevice(insts)
	//	device.Trace = true
	acc, err := device.RunUntilRepeat()
	if err != ErrInstructionRepeat {
		fmt.Printf("Can't run device: %s\n", err)
		return
	}
	fmt.Printf("RUR: %d\n", acc)

FLIP:
	for i := 0; i < len(insts); i++ {
		instCopy := make([]Instruction, len(insts))
		copy(instCopy, insts)
		switch instCopy[i].op {
		case "jmp":
			instCopy[i].op = "nop"
		case "nop":
			instCopy[i].op = "jmp"
		case "acc":
			continue FLIP
		}
		device := NewDevice(instCopy)
		acc, err := device.RunUntilRepeat()
		if err == ErrHaltedAtEnd {
			fmt.Printf("RUH: %d\n", acc)
			break FLIP
		}
	}
}

type Device struct {
	acc          int
	ip           int
	instructions []Instruction
	seen         *bitmap.Bitmap

	Trace bool
}

func NewDevice(insts []Instruction) *Device {
	return &Device{
		instructions: insts,
		seen:         bitmap.New(len(insts)),
	}
}

var ErrHaltedAtEnd error = errors.New("Halted at end")
var ErrIPOverflow error = errors.New("IP Overflow")
var ErrInstructionRepeat error = errors.New("Instruction Repeat")

func (d *Device) RunUntilRepeat() (int, error) {
	for {
		if seen, _ := d.seen.Get(d.ip); seen {
			return d.acc, ErrInstructionRepeat
		}
		if d.ip == len(d.instructions) {
			return d.acc, ErrHaltedAtEnd
		}
		if d.ip > len(d.instructions) {
			return d.acc, ErrIPOverflow
		}
		inst := d.instructions[d.ip]
		d.seen.Set(d.ip)
		if d.Trace {
			fmt.Printf("%d (%d): %s\n", d.ip, d.acc, inst)
		}
		err := d.step(inst)
		if err != nil {
			return 0, fmt.Errorf("Error at ip [%d]: %s", d.ip, err)
		}
	}
}

func (d *Device) step(inst Instruction) error {
	switch inst.op {
	case "nop":
		d.ip++
	case "acc":
		d.acc += inst.arg
		d.ip++
	case "jmp":
		d.ip += inst.arg
	default:
		return fmt.Errorf("Unrecognised opcode: %s", inst.op)
	}
	return nil
}

type Instruction struct {
	op  string
	arg int
}

func NewInstruction(s string) Instruction {
	bits := strings.SplitN(s, " ", 2)
	if len(bits) != 2 {
		panic(fmt.Sprintf("Can't split instruction into two parts: [%s]", s))
	}

	arg, err := strconv.Atoi(bits[1])
	if err != nil {
		panic(fmt.Sprintf("Parse arg as int [%s]: %s", bits[1], err))
	}
	return Instruction{
		op:  bits[0],
		arg: arg,
	}
}

func (inst Instruction) String() string {
	return fmt.Sprintf("%s %+d", inst.op, inst.arg)
}
